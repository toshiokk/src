Simple Japanese Input Method implementation

[開発ポリシー]
・最低限の機能
　・入力はローマ字式のみ
　・連文節変換は不要。先頭から1文節ずつの変換/確定で良い。
　　20150125 連文節変換に対応。(連文節変換履歴により変換効率がかなり良くなった。)
　・最低限の辞書
　　・標識、抗体、洗浄などは必須(cannaの辞書で十分)
　　・金沢文庫などは金沢と文庫に分けて変換できればよい
　・学習機能はどうするか? あった方が良い。
　　ないと "せんじょう" を変換するたびに戦場や船上の後ろに出てくる
　　洗浄を選択しなければならず面倒。
　　・学習結果がファイル保存されれば完璧
　　　そうでない場合電源を切ると学習結果が消える。
　　・FIFO式の変換履歴タイプでも可
　　　例:最近の100(10000)変換結果だけ保存。
　　・辞書と変換履歴を併用した検索
　　　最近の変換結果が上位にリストされる。
　・実用レベルの変換スピード
　　バイナリサーチで十分な高速化達成された。タグの生成などは不要。
　・キーのカスタマイズは出来ない
　　プログラム中に固定記述
　・入力ヒストリ機能
　　20150125 何か一文字押してから↑を押すと読みの入力履歴から選択可能。

・入力出来ない文字がないこと(必ず何らかの手段で全ての文字が入力出来ること)
　・単漢字辞書に漏れがないこと
　・ローマ字入力時
　　ひらがな一覧からの入力(記号含む)
　　(候補が多量な場合専用の選択リスト表示が好ましい)[UI次第]
　・変換時
　　単漢字変換と漢字一覧からの入力(記号含む)
　　(候補が多量な場合専用の選択リスト表示が好ましい)[UI次第]
　・全文字リストからの選択入力機能。[]

・初めて使っても何とか使いこなせること(初期のATOKの様に)
　・IMのON/OFF:[Alt-`]/[Ctrl-Space]
　・読みの入力
　　・全角スペ−スの(送信):[Space]
　　・無変換のまま全確定(送信):[Enter]
　　・入力の放棄:[Esc]
　　・全角英数:[F9]
　　・半角英数:[F10]
　　・読み入力ヒストリからの選択[↑]
　　・変換予測リストからの選択[↓]
　　・変換開始:[Space]
　　　・文節長の変更:[← →]
　　　・前候補の選択:[↑]
　　　・次候補の選択:[Space]
　　　・1文節確定(送信):[↓]
　　　・全確定(送信):[Enter]
　　　・読み入力へ戻る:[Backspace]
　　　・入力の放棄:[Esc]
　　　・全角ひらがな:[F6]
　　　・全角カタカナ:[F7]
　　　・半角ｶﾀｶﾅ:[F8]
　　　・全角英大文字:[F9]
　　　・半角英大文字:[F10]
　　　・全角英小文字:[F11]
　　　・半角英小文字:[F12]
・使用言語はC
　C++も候補であるが、従来のCコンパイラ環境での利用も考えCとする。
　20150125 スレッドセーフ化の要求に応じC++に書き換え。

[変換アルゴリズム]
入力文字列: かくはんしてください。
1.まず最長一致検索する
  かくはんし(<攪拌子> 撹拌子 かくはんし カクハンシ )てください。
2.必要なら文節区切りを修正し、指定長一致検索する
  かくはん(<攪拌>撹拌 拡販 各版 かくはん カクハン )してください。
3.候補を選択する
  かくはん( 攪拌<撹拌>拡販 各版 かくはん カクハン )してください。
4.確定(commit)する
  撹拌 して(<仕手>して シテ )ください。
5.入力文字列がなくなるまで上記を繰り返す

[辞書への独自追加]
[x]ローマ数字(ⅠⅡⅢⅤ...)を登録(辞書ファイルの編集はkeditで行う必要あり)。

[ローマ字変換テーブルへの独自追加]
なし

[例外処理考察]
・"いう゛ぇんと"(ivennto)の "゛" を削除する場合、
　ひらがなからローマ字への逆変換を使用し、"う゛ぇ"(ve)を(ux"le) としてから
　"゛" に相当する(x")を削除することで辻褄を合わせる。
・"っか" の "か" を削除すると、k になってしまう。
　(kka) を (ltsuka) と分解してから ka を削除し "っ"(ltsu) とする。
・"っか" の "か" の前に "n" を挿入するとおかしくなる。
　(kka) を (ltsuka) と分解してから n を挿入し "っんか"(unka) とする。
・"さい"(sai) の "い" の前に n を挿入した場合、
　"さに"(sani) となってしまうことを回避する方法。
　"n" の次に不可視なセパレータ '\x01'(|) も追加する。
　(san|i) となり正常に "さんい" と変換される。
・読み入力で「かん」を「かjkjん」と修正しkを削除すると「かっjん」と
　ローマ字変換がはたらいてしまう。「かjjん」となって欲しい。
　==> IM off で直接入力すれば回避できるのでそのままにする。

[辞書検索高速化手法比較] ==> 最終的にバイナリサーチに集約
辞書ファイルサイズ:4.3MB
レコード数:13万
・全レコードのオフセットを事前にテーブルにしておき、バイナリサーチ
　メモリ:520000バイト(13万 x sizeof(long))
　平均検索レコード数:17
　ファイルアクセス:広範囲のランダム
　検索タイプ:指定長一致
　処理時間:レコードのバイナリサーチ
・検索キーの先頭2文字でタグを作成しておき、タグ先頭から随時検索
　メモリ:40000バイト(100x100xsizeof(long))
　平均検索レコード数:100？
　ファイルアクセス:シーケンシャル
　検索タイプ:最長一致、指定長一致
　処理時間:タグリスト内の検索 + 分割エリア内随時サーチ
・全レコードを1000分割したタグを作成しておき、分割エリア内をバイナリサーチ
　メモリ:520000 + 60000 (13万 x sizeof(long) + 1000 x sizeof(char [3*20]))
　平均検索レコード数:7
　ファイルアクセス:分割エリア内ランダム
　検索タイプ:最長一致、指定長一致
　処理時間:タグリスト内の検索 + 分割エリア内バイナリサーチ

[091216 残された課題]
・分析装置で項目名や試薬名等の入力を行なう程度であれば十分な変換効率を達成。
・一般文章入力での利用が多いなら、品詞情報を利用した活用形への対応が必要。
　そうしないと特に"見る"、"買え"、"舞え"等語幹の読みが1文字の動詞/形容詞の
　変換がまったく出来ない。"みる"==>"ミル"、"かえ"==>"替え"、"まえ"==>"前"
　語幹が2文字になるとかなりマシになる。
　[解決法1]活用まで含めた読みを辞書に登録する。
　　[利点]変換プログラムは複雑にならない。
　　[欠点]辞書サイズの増大。
　　　　　辞書を活用まで含んだ内容に拡張するプログラムが必要。
　　　　　拡張プログラムは品詞コードと対応する活用形を理解している必要有。
　　　　　変換アルゴリズム改良の度に辞書ファイル(4MB)を更新する必要が有る。
　[解決法2]辞書はそのままにプログラムに活用認識機能を実装する。
　　　　　(実在する多くの変換プログラムで取られている方法)
　　[利点]辞書の変換が不要。辞書をシンプルなままに保てる。
　　[欠点]変換プログラムが複雑になる。変換処理が重くなる懸念。
　　　　　変換プログラムは品詞コードと対応する活用形を理解し、
　　　　　読みが活用形であるか比較する必要有。
　　　　　大半の変換アルゴリズム改良はプログラム本体の更新だけで済む。
　[方針]
　　いずれの方法でも品詞コードと対応する活用形を理解する必要がある。
　　プログラムだけのバージョンアップで済む、解決法2を選択する。
　20100104完了。
・全漢字(文字)リストからの選択入力。[]

・スレッドセーフ化
　変換中の状態変数が1セットだけのため、複数スレッドからの並列呼び出しに未対応。
　複数タスク(プロセス)からの呼び出しは問題無し｡
　[方法1]C++のオブジェクト指向を取り入れ必ずインスタンスへのポインタを渡す｡
　[方法2]C++で書き換える｡
　一つのプロセスの複数のスレッドから同時に変換処理を呼び出すことは、
　通常ないので問題なし。
　20100104 未対応決定。
　20150125 部分的にC++class化完了。

・Qtアプリケーションへの汎用的な組み込み
　IMを考慮していないアプリケーションからも自然に使用可能にする。
　キーボードイベントをフックし、IMをON/OFF。
　キーボードイベント送信により、入力文字列をアプリケーションに送る。

・uconへの組み込み
　統合日本語コンソール環境(日本語表示+日本語入力)の実現。
　エンコーディングはUTF-8のみで可。
　20100401 完了。

[状態遷移]
-------	---------------	-------------------------------	-----------------------	--------
State	Key		処理				状態遷移		補足説明
OFF
	IME_ON						==> ON stateへ、
			読み入力残っていれば		==> INPUTTING stateへ
	上記以外のキー	IMJはそのキーを eat せず、アプリケーションへ通過させる
ON(読み入力なし)
	IME_OFF						==> OFF stateへ
	文字		ローマ字読み入力		==> INPUTTING stateへ
	SP		全角スペース確定
	上記以外のキー	IMJはそのキーを eat せず、アプリケーションへ通過させる
INPUTTING(読み入力あり)
	IME_OFF		読み入力保持したまま		==> OFF stateへ
	ESC		入力クリアし			==> ON stateへ
	文字		ローマ字読み入力
	SP						==> CONVERTING stateへ
	UP		前入力履歴を読み入力に取り込み
	DOWN		次入力履歴を読み入力に取り込み
	LEFT/RIGHT	読み内カーソル移動
	Enter		無変換のまま全確定		==> ON stateへ
	BS		読みBS、読み入力無くなれば	==> ON stateへ
	Del		読みDel、読み入力無くなれば	==> ON stateへ
	F05--F10	読み入力からの変換(無変換/全かな/全カタ/半ｶﾀ/全大/全小/半大/半小)
	上記以外のキー	IMJはそのキーを eat せず、アプリケーションへ通過させる
CONVERTING
	IME_OFF		読み入力保持したまま		==> OFF stateへ
	ESC		入力クリアし			==> ON stateへ
	文字		全文節確定し			==> ON stateで、ローマ字読み入力
	SP		次変換候補の表示
	UP		前変換候補の表示
	LEFT/RIGHT	文節区切り移動
	DOWN		文節確定、次文節なければ	==> ON stateへ
			次文節あればそのまま次文節の変換を継続
	Enter		全文節確定し			==> ON stateへ
	BS						==> INPUTTING stateへ
	F05--F10	読み入力からの変換(無変換/全かな/全カタ/半ｶﾀ/全大/全小/半大/半小)
	上記以外のキー	IMJはそのキーを eat せず、アプリケーションへ通過させる
-------------------------------------------------------------------------------

[TODOs]
・[i]全文字リストからの単漢字選択入力機能。
・スレッドセーフ化
　変換中の状態変数が1セットだけのため、複数スレッドからの並列呼び出しに未対応。
　[x]C++化してマルチインスタンス変換に対応。
　[x]これによって連文節変換にも対応可能。
　(連文節の場合、文節毎に変換結果や変換候補を保持する必要がある為)
・変換効率の向上
　せんそうとへいわ(戦争と平和)は問題ないが、
　しこうとけいさん(思考と計算)は学習が効かず「思考時計さん」と変換されてしまう。
　これは「とけいさん」で「時計」という長い辞書単語に一致してしまう為である。
　「と計算」で一括確定すれば変換履歴に残るので、次回からは「と計算」で変換される。
　ただし、「と」、「計算」と分割確定した場合は「とけいさん」で学習されない。
　[x]連続して、「と」、「計算」と分割確定した場合は「とけいさん」で学習される様にすべき。
・[x]全角スペース入力の簡易さ
・[x]読み入力履歴の最大長を180バイト程度に。(現状は変換履歴スキーム内の為180バイト)
　「にゅうりょくりれきのさいだいちょうをよりながくする」としても
　「にゅうりょくりれきのさいだいちょ」までしか記憶されない。

[不具合・改良]
・"の","ます","おせわになっております" などひらがなを無変換のまま
　確定した場合の変換履歴への登録について。
　"おせわになっております" など長いひらがなを間違って無変換のまま
　確定してしまうと、履歴から消えるまで変換候補の先頭にリストされ使いにくい。
　==>[x]後に正しく確定させればその変換結果が優先するので大丈夫の筈。
・読みを入力し変換せず確定した場合は変換履歴に登録しない。
　==>[x]無変換として学習する。
・文節を一つずつ確定した時、読みに文字化けが起こる。
・[x]一行に表示する変換候補の数を候補の長さに依って可変にする。
　短い候補の場合5候補、長い場合1候補など。
・入力履歴から再変換し部分確定していった時、おかしくなる。
・複数のターミナルから使用した場合、他のターミナルでの学習が利用されない。
　更に、個別にヒストリファイルを上書きするので他のターミナルの学習が失われる。
　マルチタスクからのヒストリ更新管理は排他制御が必要。難しい。

[参考になるツール]
・分かち書きツール
　TinySegmenter
・漢字をひらがなに変換
　http://tool.stabucky.com/convert/kanji2kana.php
　http://stabucky.com/wp/archives/5163
