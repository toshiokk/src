meld ../../be/be/myutf8.h ../../ucon/ucon/myutf8.h
22,27d21
< 
< #define VAGUE_WIDE_CHR	// treat characters which width(narrow/wide) is vague as to be wide
< #ifdef VAGUE_WIDE_CHR
< int is_vague_wide_chr(wchar_t wc);
< #endif // VAGUE_WIDE_CHR
< 
meld ../../be/be/myutf8.c ../../ucon/ucon/myutf8.c
8c8
< #define WIDE_CHARS		(20 + 12 + 14 + 1)
---
> #define	WIDE_CHARS		(12 + 20 + 14 + 1)
9a10
>  "■", "□", "◆", "◇", "○", "◎", "●", "★", "☆", "☐", "☑", "☒",
12d12
<  "■", "□", "◆", "◇", "○", "◎", "●", "★", "☆", "☐", "☑", "☒",
48d47
< #ifndef VAGUE_WIDE_CHR
50,53d48
< #else // VAGUE_WIDE_CHR
< 	wchar_t wc = my_mbtowc(utf8c, max_len);
< 	return is_vague_wide_chr(wc) ? 2 : my_wcwidth(wc);
< #endif // VAGUE_WIDE_CHR
62a58,60
> ///	if (wc == 0x0000) {		// U+0000
> ///		return 0;
> ///	}
75,87d72
< #ifdef VAGUE_WIDE_CHR
< int is_vague_wide_chr(wchar_t wc)
< {
< 	return 0
< 	// WIDE_CHAR_LIST
< 	 || (0x2000 <= wc && wc < 0x2800)
< 	 || (0x2900 <= wc && wc < 0x33e0)
< 	 || (0xa000 <= wc && wc < 0xac00)
< 	 || (0xe000 <= wc && wc < 0xf900)
< 	;
< }
< #endif // VAGUE_WIDE_CHR
< 
108a94,96
> #if 0
> 	return mbtowc(pwc, utf8c, max_len);
> #else
114,115c102,103
< 	if ((utf8c[0] & 0x80) == 0x00) {	// 0xxxxxxx
< 		wc = utf8c[0] & 0x7f;			// 0xxxxxxx
---
> 	if ((utf8c[0] & 0x80) == 0x00) {		// 0xxxxxxx
> 		wc = utf8c[0] & 0x7f;				// 0xxxxxxx
118,119c106,107
< 	if ((utf8c[0] & 0xe0) == 0xc0) {	// 110xxxxx-10xxxxxx
< 		wc = utf8c[0] & 0x1f;			// 110xxxxx
---
> 	if ((utf8c[0] & 0xe0) == 0xc0) {		// 110xxxxx-10xxxxxx
> 		wc = utf8c[0] & 0x1f;				// 110xxxxx
122,123c110,111
< 	if ((utf8c[0] & 0xf0) == 0xe0) {	// 1110xxxx-10xxxxxx-10xxxxxx
< 		wc = utf8c[0] & 0x0f;			// 1110xxxx
---
> 	if ((utf8c[0] & 0xf0) == 0xe0) {		// 1110xxxx-10xxxxxx-10xxxxxx
> 		wc = utf8c[0] & 0x0f;				// 1110xxxx
126,127c114,115
< 	if ((utf8c[0] & 0xf8) == 0xf0) {	// 11110xxx-10xxxxxx-10xxxxxx-10xxxxxx
< 		wc = utf8c[0] & 0x07;			// 11110xxx
---
> 	if ((utf8c[0] & 0xf8) == 0xf0) {		// 11110xxx-10xxxxxx-10xxxxxx-10xxxxxx
> 		wc = utf8c[0] & 0x07;				// 11110xxx
130,131c118,119
< 	if ((utf8c[0] & 0xfc) == 0xf8) {	// 111110xx-10xxxxxx-10xxxxxx-10xxxxxx-10xxxxxx
< 		wc = utf8c[0] & 0x03;			// 111110xx
---
> 	if ((utf8c[0] & 0xfc) == 0xf8) {		// 111110xx-10xxxxxx-10xxxxxx-10xxxxxx-10xxxxxx
> 		wc = utf8c[0] & 0x03;				// 111110xx
134,135c122,123
< 	if ((utf8c[0] & 0xfe) == 0xfc) {	// 1111110x-10xxxxxx-10xxxxxx-10xxxxxx-10xxxxxx-10xxxxxx
< 		wc = utf8c[0] & 0x01;			// 1111110x
---
> 	if ((utf8c[0] & 0xfe) == 0xfc) {		// 1111110x-10xxxxxx-10xxxxxx-10xxxxxx-10xxxxxx-10xxxxxx
> 		wc = utf8c[0] & 0x01;				// 1111110x
142c130
< 			break;		// UTF8 sequence trancated !!
---
> 			break;
145d132
< 	len = idx;
147c134,135
< 	return len;		// return length
---
> 	return len;
> #endif
